/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package eu.rebelcorp.parse;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.Bundle;

import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.titanium.TiApplication;

import android.app.ActivityManager;
import android.app.ActivityManager.RecentTaskInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import eu.rebelcorp.parse.ParseModule;
import com.parse.ParsePushBroadcastReceiver;


public class ParseModuleBroadcastReceiver extends ParsePushBroadcastReceiver {

    @Override
    public void onPushOpen(Context context, Intent intent) {
        Log.d("onPushOpen", "Clicked");
    
        if(ParseModule.getInstance() != null) {
            Log.d("onPushOpen", "App is running");
//            Intent i = new Intent(context, TiApplication.getAppRootOrCurrentActivity().getClass());
//            i.putExtras(intent.getExtras());
//            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//            context.startActivity(i);
            
            bringFront(context);
        }
        else {
            Log.d("onPushOpen", "App is not running");
            
            Intent i = context.getPackageManager().getLaunchIntentForPackage(context.getApplicationContext().getPackageName());
            i.putExtras(intent.getExtras());
            context.startActivity(i);
        }
    }
    
    @Override
    public void onReceive(Context context, Intent intent) {
//        super.onReceive(context, intent);
        
        try {
            if (intent == null) {
                Log.d("onReceive", "Receiver intent null");
            } else {
                String action = intent.getAction();
                Log.d("onReceive", "got action " + action );
                
                if(ParseModule.getInstance() != null) {
                
                    if (action.equals("com.parse.push.intent.RECEIVE")) {
                        
                        String data = intent.getExtras().getString("com.parse.Data");
                        Log.d("onReceive", "and data " + data);
                        
                        JSONObject json = new JSONObject(data);
                        KrollDict dict = new KrollDict(json);
                        
                        Log.d("onReceive", "in notification.");
                        ParseModule.getInstance().fireEvent("notificationreceive", dict);
                        
                    }
                    else if(action.equals("com.parse.push.intent.OPEN")) {
                        String data = intent.getExtras().getString("com.parse.Data");
                        Log.d("onReceive", "and data " + data);
                        
                        JSONObject json = new JSONObject(data);
                        KrollDict dict = new KrollDict(json);
                        
                        Log.d("onReceive", "opened.");
                        ParseModule.getInstance().fireEvent("notificationopen", dict);
                    }
                }
                else {
                    Log.d("onReceive", "no instance of ParseModule found");
                }
            }
            
        } catch (Exception e) {
            Log.e("Push", "Exception: " + e.toString());
        }
        
        super.onReceive(context, intent);
        
    }

    private static boolean bringFront(Context context) {
        boolean flag = true;
        String packageName = context.getApplicationContext().getPackageName();
        try {
            final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
            final List<RecentTaskInfo> recentTasks = activityManager.getRecentTasks(Integer.MAX_VALUE, ActivityManager.RECENT_IGNORE_UNAVAILABLE);
            
            RecentTaskInfo recentTaskInfo = null;
             
            for (int i = 0; i < recentTasks.size(); i++) 
            {
                if (recentTasks.get(i).baseIntent.getComponent().getPackageName().equals(packageName)) {
                   recentTaskInfo = recentTasks.get(i);
                   break;
                }
            }
             
            if(recentTaskInfo != null && recentTaskInfo.id > -1) {
                activityManager.moveTaskToFront(recentTaskInfo.persistentId, ActivityManager.MOVE_TASK_WITH_HOME);
                return flag;
            }
            
        } catch (Exception exception) {
            flag = false;
            exception.printStackTrace();
        }
        return flag;
    }
}